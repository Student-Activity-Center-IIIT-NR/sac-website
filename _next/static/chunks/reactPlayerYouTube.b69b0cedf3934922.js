(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8446],{8344:(e,t,a)=>{var l=Object.create,s=Object.defineProperty,r=Object.getOwnPropertyDescriptor,i=Object.getOwnPropertyNames,o=Object.getPrototypeOf,n=Object.prototype.hasOwnProperty,p=(e,t,a,l)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let o of i(t))n.call(e,o)||o===a||s(e,o,{get:()=>t[o],enumerable:!(l=r(t,o))||l.enumerable});return e},y=(e,t,a)=>(((e,t,a)=>t in e?s(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a)(e,"symbol"!=typeof t?t+"":t,a),a),c={};((e,t)=>{for(var a in t)s(e,a,{get:t[a],enumerable:!0})})(c,{default:()=>b}),e.exports=p(s({},"__esModule",{value:!0}),c);var u=((e,t,a)=>(a=null!=e?l(o(e)):{},p(!t&&e&&e.__esModule?a:s(a,"default",{value:e,enumerable:!0}),e)))(a(4232)),h=a(4657),d=a(3443);let P=/[?&](?:list|channel)=([a-zA-Z0-9_-]+)/,m=/user\/([a-zA-Z0-9_-]+)\/?/,g=/youtube-nocookie\.com/;class b extends u.Component{constructor(){super(...arguments),y(this,"callPlayer",h.callPlayer),y(this,"parsePlaylist",e=>{if(e instanceof Array)return{listType:"playlist",playlist:e.map(this.getID).join(",")};if(P.test(e)){let[,t]=e.match(P);return{listType:"playlist",list:t.replace(/^UC/,"UU")}}if(m.test(e)){let[,t]=e.match(m);return{listType:"user_uploads",list:t}}return{}}),y(this,"onStateChange",e=>{let{data:t}=e,{onPlay:a,onPause:l,onBuffer:s,onBufferEnd:r,onEnded:i,onReady:o,loop:n,config:{playerVars:p,onUnstarted:y}}=this.props,{UNSTARTED:c,PLAYING:u,PAUSED:h,BUFFERING:d,ENDED:P,CUED:m}=window.YT.PlayerState;if(t===c&&y(),t===u&&(a(),r()),t===h&&l(),t===d&&s(),t===P){let e=!!this.callPlayer("getPlaylist");n&&!e&&(p.start?this.seekTo(p.start):this.play()),i()}t===m&&o()}),y(this,"mute",()=>{this.callPlayer("mute")}),y(this,"unmute",()=>{this.callPlayer("unMute")}),y(this,"ref",e=>{this.container=e})}componentDidMount(){this.props.onMount&&this.props.onMount(this)}getID(e){return!e||e instanceof Array||P.test(e)?null:e.match(d.MATCH_URL_YOUTUBE)[1]}load(e,t){let{playing:a,muted:l,playsinline:s,controls:r,loop:i,config:o,onError:n}=this.props,{playerVars:p,embedOptions:y}=o,c=this.getID(e);if(t)return P.test(e)||m.test(e)||e instanceof Array?void this.player.loadPlaylist(this.parsePlaylist(e)):void this.player.cueVideoById({videoId:c,startSeconds:(0,h.parseStartTime)(e)||p.start,endSeconds:(0,h.parseEndTime)(e)||p.end});(0,h.getSDK)("https://www.youtube.com/iframe_api","YT","onYouTubeIframeAPIReady",e=>e.loaded).then(t=>{this.container&&(this.player=new t.Player(this.container,{width:"100%",height:"100%",videoId:c,playerVars:{autoplay:+!!a,mute:+!!l,controls:+!!r,start:(0,h.parseStartTime)(e),end:(0,h.parseEndTime)(e),origin:window.location.origin,playsinline:+!!s,...this.parsePlaylist(e),...p},events:{onReady:()=>{i&&this.player.setLoop(!0),this.props.onReady()},onPlaybackRateChange:e=>this.props.onPlaybackRateChange(e.data),onPlaybackQualityChange:e=>this.props.onPlaybackQualityChange(e),onStateChange:this.onStateChange,onError:e=>n(e.data)},host:g.test(e)?"https://www.youtube-nocookie.com":void 0,...y}))},n),y.events&&console.warn("Using `embedOptions.events` will likely break things. Use ReactPlayerâ€™s callback props instead, eg onReady, onPlay, onPause")}play(){this.callPlayer("playVideo")}pause(){this.callPlayer("pauseVideo")}stop(){document.body.contains(this.callPlayer("getIframe"))&&this.callPlayer("stopVideo")}seekTo(e,t=!1){this.callPlayer("seekTo",e),t||this.props.playing||this.pause()}setVolume(e){this.callPlayer("setVolume",100*e)}setPlaybackRate(e){this.callPlayer("setPlaybackRate",e)}setLoop(e){this.callPlayer("setLoop",e)}getDuration(){return this.callPlayer("getDuration")}getCurrentTime(){return this.callPlayer("getCurrentTime")}getSecondsLoaded(){return this.callPlayer("getVideoLoadedFraction")*this.getDuration()}render(){let{display:e}=this.props;return u.default.createElement("div",{style:{width:"100%",height:"100%",display:e}},u.default.createElement("div",{ref:this.ref}))}}y(b,"displayName","YouTube"),y(b,"canPlay",d.canPlay.youtube)}}]);